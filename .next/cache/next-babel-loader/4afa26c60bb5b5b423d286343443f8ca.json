{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport React from 'react';\nimport { useMusicPlayerContext } from '../contexts/MusicPlayerContext';\nimport { isBrowser } from '../helpers/utils.helper';\nexport const musicPlayer = {\n  instance: null,\n  setInstance: instance => musicPlayer.instance = instance,\n  getInstance: () => musicPlayer.instance\n};\nconst audioList1 = [{\n  name: 'Despacito',\n  singer: 'Luis Fonsi',\n  cover: 'http://res.cloudinary.com/alick/image/upload/v1502689731/Despacito_uvolhp.jpg',\n  musicSrc: () => _Promise.resolve('http://res.cloudinary.com/alick/video/upload/v1502689683/Luis_Fonsi_-_Despacito_ft._Daddy_Yankee_uyvqw9.mp3')\n}];\nexport const options = {\n  // audio lists model\n  audioLists: audioList1,\n  // default play index of the audio player  [type `number` default `0`]\n  defaultPlayIndex: 0,\n  // if you want dynamic change current play audio you can change it [type `number` default `0`]\n  // playIndex: 0,\n  // color of the music player theme    [ type `string: 'light' or 'dark'  ` default 'dark' ]\n  theme: 'dark',\n  // Specifies movement boundaries. Accepted values:\n  // - `parent` restricts movement within the node's offsetParent\n  //    (nearest node with position relative or absolute), or\n  // - a selector, restricts movement within the targeted node\n  // - An object with `left, top, right, and bottom` properties.\n  //   These indicate how far in each direction the draggable\n  //   can be moved.\n  bounds: 'body',\n  // Replace a new playlist with the first loaded playlist\n  // instead of adding it at the end of it.\n  // [type `boolean`, default `false`]\n  clearPriorAudioLists: true,\n  // Play your new play list right after your new play list is loaded turn false.\n  // [type `boolean`, default `false`]\n  autoPlayInitLoadPlayList: true,\n  // Whether to load audio immediately after the page loads.  [type `Boolean | String`, default `false`]\n  // \"auto|metadata|none\" \"true| false\"\n  preload: false,\n  // Whether the player's background displays frosted glass effect  [type `Boolean`, default `false`]\n  glassBg: false,\n  // The next time you access the player, do you keep the last state  [type `Boolean` default `false`]\n  remember: false,\n  // The Audio Can be deleted  [type `Boolean`, default `true`]\n  remove: true,\n  // audio controller initial position    [ type `Object` default '{top:0,left:0}' ]\n  defaultPosition: {\n    top: 300,\n    left: 120\n  },\n  //   // play mode text config of the audio player\n  //   playModeText: {\n  //     order: \"\",\n  //     orderLoop: \"\",\n  //     singleLoop: \"\",\n  //     shufflePlay: \"\"\n  //   },\n  defaultPlayMode: 'order',\n  // audio mode        mini | full          [type `String`  default `mini`]\n  mode: 'mini',\n\n  /**\n   * [ type `Boolean` default 'false' ]\n   * The default audioPlay handle function will be played again after each pause, If you only want to trigger it once, you can set 'true'\n   */\n  once: false,\n  // Whether the audio is played after loading is completed. [type `Boolean` default 'true']\n  autoPlay: true,\n  // Whether you can switch between two modes, full => mini  or mini => full   [type 'Boolean' default 'true']\n  toggleMode: true,\n  // audio cover is show of the \"mini\" mode [type `Boolean` default 'true']\n  showMiniModeCover: true,\n  // audio playing progress is show of the \"mini\"  mode\n  showMiniProcessBar: false,\n  // audio controller is can be drag of the \"mini\" mode     [type `Boolean` default `true`]\n  drag: true,\n  // drag the audio progress bar [type `Boolean` default `true`]\n  seeked: true,\n  // Displays the audio load progress bar.  [type `Boolean` default `true`]\n  showProgressLoadBar: true,\n  // play button display of the audio player panel   [type `Boolean` default `true`]\n  showPlay: true,\n  // reload button display of the audio player panel   [type `Boolean` default `true`]\n  showReload: true,\n  // download button display of the audio player panel   [type `Boolean` default `true`]\n  showDownload: false,\n  // loop button display of the audio player panel   [type `Boolean` default `true`]\n  showPlayMode: true,\n  // theme toggle switch  display of the audio player panel   [type `Boolean` default `true`]\n  showThemeSwitch: true,\n  // lyric display of the audio player panel   [type `Boolean` default `false`]\n  showLyric: false,\n  // Extensible custom content       [type 'Array' default '[]' ]\n  extendsContent: [],\n  // default volume of the audio player [type `Number` default `100` range `0-100`]\n  defaultVolume: 100,\n  // playModeText show time [type `Number(ms)` default `700`]\n  playModeShowTime: 600,\n  // Whether to try playing the next audio when the current audio playback fails [type `Boolean` default `true`]\n  loadAudioErrorPlayNext: true,\n  // Auto hide the cover photo if no cover photo is available [type `Boolean` default `false`]\n  autoHiddenCover: true,\n\n  // // custom music player root node\n  getContainer() {\n    return document.body;\n  },\n\n  getAudioInstance: instance => {\n    musicPlayer.setInstance(instance);\n  }\n};","map":{"version":3,"sources":["C:/Users/PC/WebstormProjects/nextjs/SoundCloudClone/src/constants/musicPlayer.constant.js"],"names":["React","useMusicPlayerContext","isBrowser","musicPlayer","instance","setInstance","getInstance","audioList1","name","singer","cover","musicSrc","resolve","options","audioLists","defaultPlayIndex","theme","bounds","clearPriorAudioLists","autoPlayInitLoadPlayList","preload","glassBg","remember","remove","defaultPosition","top","left","defaultPlayMode","mode","once","autoPlay","toggleMode","showMiniModeCover","showMiniProcessBar","drag","seeked","showProgressLoadBar","showPlay","showReload","showDownload","showPlayMode","showThemeSwitch","showLyric","extendsContent","defaultVolume","playModeShowTime","loadAudioErrorPlayNext","autoHiddenCover","getContainer","document","body","getAudioInstance"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,qBAAT,QAAsC,gCAAtC;AACA,SAASC,SAAT,QAA0B,yBAA1B;AAEA,OAAO,MAAMC,WAAW,GAAG;AACzBC,EAAAA,QAAQ,EAAE,IADe;AAEzBC,EAAAA,WAAW,EAAGD,QAAD,IAAeD,WAAW,CAACC,QAAZ,GAAuBA,QAF1B;AAGzBE,EAAAA,WAAW,EAAE,MAAMH,WAAW,CAACC;AAHN,CAApB;AAMP,MAAMG,UAAU,GAAG,CACjB;AACEC,EAAAA,IAAI,EAAE,WADR;AAEEC,EAAAA,MAAM,EAAE,YAFV;AAGEC,EAAAA,KAAK,EACH,+EAJJ;AAKEC,EAAAA,QAAQ,EAAE,MAAM,SAAQC,OAAR,CACd,6GADc;AALlB,CADiB,CAAnB;AAYA,OAAO,MAAMC,OAAO,GAAG;AACrB;AACAC,EAAAA,UAAU,EAAEP,UAFS;AAIrB;AACAQ,EAAAA,gBAAgB,EAAE,CALG;AAOrB;AACA;AAEA;AACAC,EAAAA,KAAK,EAAE,MAXc;AAarB;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,MAAM,EAAE,MApBa;AAsBrB;AACA;AACA;AACAC,EAAAA,oBAAoB,EAAE,IAzBD;AA2BrB;AACA;AACAC,EAAAA,wBAAwB,EAAE,IA7BL;AA+BrB;AACA;AACAC,EAAAA,OAAO,EAAE,KAjCY;AAmCrB;AACAC,EAAAA,OAAO,EAAE,KApCY;AAsCrB;AACAC,EAAAA,QAAQ,EAAE,KAvCW;AAyCrB;AACAC,EAAAA,MAAM,EAAE,IA1Ca;AA4CrB;AACAC,EAAAA,eAAe,EAAE;AACfC,IAAAA,GAAG,EAAE,GADU;AAEfC,IAAAA,IAAI,EAAE;AAFS,GA7CI;AAkDrB;AACA;AACA;AACA;AACA;AACA;AACA;AAEAC,EAAAA,eAAe,EAAE,OA1DI;AA4DrB;AACAC,EAAAA,IAAI,EAAE,MA7De;;AA+DrB;;;;AAIAC,EAAAA,IAAI,EAAE,KAnEe;AAqErB;AACAC,EAAAA,QAAQ,EAAE,IAtEW;AAwErB;AACAC,EAAAA,UAAU,EAAE,IAzES;AA2ErB;AACAC,EAAAA,iBAAiB,EAAE,IA5EE;AA8ErB;AACAC,EAAAA,kBAAkB,EAAE,KA/EC;AAiFrB;AACAC,EAAAA,IAAI,EAAE,IAlFe;AAoFrB;AACAC,EAAAA,MAAM,EAAE,IArFa;AAuFrB;AACAC,EAAAA,mBAAmB,EAAE,IAxFA;AA0FrB;AACAC,EAAAA,QAAQ,EAAE,IA3FW;AA6FrB;AACAC,EAAAA,UAAU,EAAE,IA9FS;AAgGrB;AACAC,EAAAA,YAAY,EAAE,KAjGO;AAmGrB;AACAC,EAAAA,YAAY,EAAE,IApGO;AAsGrB;AACAC,EAAAA,eAAe,EAAE,IAvGI;AAyGrB;AACAC,EAAAA,SAAS,EAAE,KA1GU;AA4GrB;AACAC,EAAAA,cAAc,EAAE,EA7GK;AA+GrB;AACAC,EAAAA,aAAa,EAAE,GAhHM;AAkHrB;AACAC,EAAAA,gBAAgB,EAAE,GAnHG;AAqHrB;AACAC,EAAAA,sBAAsB,EAAE,IAtHH;AAwHrB;AACAC,EAAAA,eAAe,EAAE,IAzHI;;AA2HrB;AACAC,EAAAA,YAAY,GAAG;AACb,WAAOC,QAAQ,CAACC,IAAhB;AACD,GA9HoB;;AAgIrBC,EAAAA,gBAAgB,EAAG/C,QAAD,IAAc;AAC9BD,IAAAA,WAAW,CAACE,WAAZ,CAAwBD,QAAxB;AACD;AAlIoB,CAAhB","sourcesContent":["import React from 'react';\nimport { useMusicPlayerContext } from '../contexts/MusicPlayerContext';\nimport { isBrowser } from '../helpers/utils.helper';\n\nexport const musicPlayer = {\n  instance: null,\n  setInstance: (instance) => (musicPlayer.instance = instance),\n  getInstance: () => musicPlayer.instance,\n};\n\nconst audioList1 = [\n  {\n    name: 'Despacito',\n    singer: 'Luis Fonsi',\n    cover:\n      'http://res.cloudinary.com/alick/image/upload/v1502689731/Despacito_uvolhp.jpg',\n    musicSrc: () => Promise.resolve(\n      'http://res.cloudinary.com/alick/video/upload/v1502689683/Luis_Fonsi_-_Despacito_ft._Daddy_Yankee_uyvqw9.mp3',\n    ),\n  },\n];\n\nexport const options = {\n  // audio lists model\n  audioLists: audioList1,\n\n  // default play index of the audio player  [type `number` default `0`]\n  defaultPlayIndex: 0,\n\n  // if you want dynamic change current play audio you can change it [type `number` default `0`]\n  // playIndex: 0,\n\n  // color of the music player theme    [ type `string: 'light' or 'dark'  ` default 'dark' ]\n  theme: 'dark',\n\n  // Specifies movement boundaries. Accepted values:\n  // - `parent` restricts movement within the node's offsetParent\n  //    (nearest node with position relative or absolute), or\n  // - a selector, restricts movement within the targeted node\n  // - An object with `left, top, right, and bottom` properties.\n  //   These indicate how far in each direction the draggable\n  //   can be moved.\n  bounds: 'body',\n\n  // Replace a new playlist with the first loaded playlist\n  // instead of adding it at the end of it.\n  // [type `boolean`, default `false`]\n  clearPriorAudioLists: true,\n\n  // Play your new play list right after your new play list is loaded turn false.\n  // [type `boolean`, default `false`]\n  autoPlayInitLoadPlayList: true,\n\n  // Whether to load audio immediately after the page loads.  [type `Boolean | String`, default `false`]\n  // \"auto|metadata|none\" \"true| false\"\n  preload: false,\n\n  // Whether the player's background displays frosted glass effect  [type `Boolean`, default `false`]\n  glassBg: false,\n\n  // The next time you access the player, do you keep the last state  [type `Boolean` default `false`]\n  remember: false,\n\n  // The Audio Can be deleted  [type `Boolean`, default `true`]\n  remove: true,\n\n  // audio controller initial position    [ type `Object` default '{top:0,left:0}' ]\n  defaultPosition: {\n    top: 300,\n    left: 120,\n  },\n\n  //   // play mode text config of the audio player\n  //   playModeText: {\n  //     order: \"\",\n  //     orderLoop: \"\",\n  //     singleLoop: \"\",\n  //     shufflePlay: \"\"\n  //   },\n\n  defaultPlayMode: 'order',\n\n  // audio mode        mini | full          [type `String`  default `mini`]\n  mode: 'mini',\n\n  /**\n   * [ type `Boolean` default 'false' ]\n   * The default audioPlay handle function will be played again after each pause, If you only want to trigger it once, you can set 'true'\n   */\n  once: false,\n\n  // Whether the audio is played after loading is completed. [type `Boolean` default 'true']\n  autoPlay: true,\n\n  // Whether you can switch between two modes, full => mini  or mini => full   [type 'Boolean' default 'true']\n  toggleMode: true,\n\n  // audio cover is show of the \"mini\" mode [type `Boolean` default 'true']\n  showMiniModeCover: true,\n\n  // audio playing progress is show of the \"mini\"  mode\n  showMiniProcessBar: false,\n\n  // audio controller is can be drag of the \"mini\" mode     [type `Boolean` default `true`]\n  drag: true,\n\n  // drag the audio progress bar [type `Boolean` default `true`]\n  seeked: true,\n\n  // Displays the audio load progress bar.  [type `Boolean` default `true`]\n  showProgressLoadBar: true,\n\n  // play button display of the audio player panel   [type `Boolean` default `true`]\n  showPlay: true,\n\n  // reload button display of the audio player panel   [type `Boolean` default `true`]\n  showReload: true,\n\n  // download button display of the audio player panel   [type `Boolean` default `true`]\n  showDownload: false,\n\n  // loop button display of the audio player panel   [type `Boolean` default `true`]\n  showPlayMode: true,\n\n  // theme toggle switch  display of the audio player panel   [type `Boolean` default `true`]\n  showThemeSwitch: true,\n\n  // lyric display of the audio player panel   [type `Boolean` default `false`]\n  showLyric: false,\n\n  // Extensible custom content       [type 'Array' default '[]' ]\n  extendsContent: [],\n\n  // default volume of the audio player [type `Number` default `100` range `0-100`]\n  defaultVolume: 100,\n\n  // playModeText show time [type `Number(ms)` default `700`]\n  playModeShowTime: 600,\n\n  // Whether to try playing the next audio when the current audio playback fails [type `Boolean` default `true`]\n  loadAudioErrorPlayNext: true,\n\n  // Auto hide the cover photo if no cover photo is available [type `Boolean` default `false`]\n  autoHiddenCover: true,\n\n  // // custom music player root node\n  getContainer() {\n    return document.body;\n  },\n\n  getAudioInstance: (instance) => {\n    musicPlayer.setInstance(instance);\n  },\n};\n"]},"metadata":{},"sourceType":"module"}