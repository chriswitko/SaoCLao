{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport constate from 'constate';\nimport React, { useRef, useCallback, useState, useMemo } from 'react';\nimport { useImmer } from 'use-immer';\nimport { options, musicPlayer } from '../constants/musicPlayer.constant';\n\nconst isCurrentTrack = (trackId, currentTrack) => trackId === currentTrack.id;\n\nconst useMusicPlayer = params => {\n  const {\n    0: currentTrack,\n    1: setCurrentTrack\n  } = useState({\n    id: 11,\n    playing: false\n  });\n  const onAudioListsChange = React.useCallback((currentPlayId, audioLists, audioInfo) => {\n    setMusicPlayerOptions(preOptions => _objectSpread({}, preOptions, {\n      audioLists\n    }));\n  }, []);\n  const onAudioPause = React.useCallback(audioInfo => {\n    setCurrentTrackPause(_parseInt(audioInfo.lyric));\n  }, []);\n  const onAudioPlay = React.useCallback(audioInfo => {\n    setCurrentTrackPlaying(_parseInt(audioInfo.lyric));\n  }, []);\n  const getAudioInstance = React.useCallback(audioInstance => {\n    musicPlayer.setInstance(audioInstance);\n  }, []);\n  const {\n    0: musicPlayerOptions,\n    1: setMusicPlayerOptions\n  } = useState(_objectSpread({}, options, {\n    onAudioListsChange,\n    getAudioInstance,\n    onAudioPause,\n    onAudioPlay\n  }));\n  const playTrack = React.useCallback(track => {\n    if (!isCurrentTrack(track.id, currentTrack)) {\n      console.log('play diff song', track.id, currentTrack);\n      addTrackToAudioList({\n        name: track.name,\n        singer: track.artist,\n        cover: track.artwork_url,\n        id: track.id,\n        lyric: `${track.id}`,\n        musicSrc: () => _Promise.resolve(`https://api.soundcloud.com/tracks/${track.id}/stream?client_id=${process.env.SOUNDCLOUD_CLIENT_ID}`)\n      });\n    }\n\n    musicPlayer.getInstance().play();\n  }, [currentTrack]);\n  const pauseTrack = React.useCallback(track => {\n    musicPlayer.getInstance().pause();\n  }, []);\n  const addTrackToAudioList = React.useCallback(track => {\n    setMusicPlayerOptions(preOptions => _objectSpread({}, preOptions, {\n      // if use global state: musicPlayerOptions instead of local state: preOptions,\n      // it will cache the initial musicPlayerOptions because of useCallbackOnce\n      // Maybe this doesn't apply for dispatch in useReducer, I don't know\n      audioLists: [track, ...preOptions.audioLists]\n    }));\n  }, []);\n  const setCurrentTrackPlaying = React.useCallback(trackId => {\n    setCurrentTrack(preTrack => {\n      const currentTrack = {\n        id: trackId,\n        playing: true\n      };\n      return currentTrack;\n    });\n  }, []);\n  const setCurrentTrackPause = React.useCallback(trackId => {\n    setCurrentTrack(preTrack => {\n      const currentTrack = {\n        id: trackId,\n        playing: false\n      };\n      return currentTrack;\n    });\n  }, []);\n  const isCurrentTrackPlaying = React.useCallback(trackId => currentTrack.id === trackId && currentTrack.playing, [currentTrack]);\n  return {\n    currentTrack,\n    isCurrentTrackPlaying,\n    musicPlayerOptions,\n    addTrackToAudioList,\n    playTrack,\n    pauseTrack\n  };\n};\n\nexport const [MusicPlayerProvider, useCurrentTrack, useIsCurrentTrackPlaying, useMusicPlayerOptions, useAddTrackToAudioList, usePlayTrack, usePauseTrack] = constate(useMusicPlayer, value => value.currentTrack, value => value.isCurrentTrackPlaying, value => value.musicPlayerOptions, value => value.addTrackToAudioList, value => value.playTrack, value => value.pauseTrack);","map":{"version":3,"sources":["C:/Users/PC/WebstormProjects/nextjs/SoundCloudClone/src/contexts/MusicPlayerContext.js"],"names":["constate","React","useRef","useCallback","useState","useMemo","useImmer","options","musicPlayer","isCurrentTrack","trackId","currentTrack","id","useMusicPlayer","params","setCurrentTrack","playing","onAudioListsChange","currentPlayId","audioLists","audioInfo","setMusicPlayerOptions","preOptions","onAudioPause","setCurrentTrackPause","lyric","onAudioPlay","setCurrentTrackPlaying","getAudioInstance","audioInstance","setInstance","musicPlayerOptions","playTrack","track","console","log","addTrackToAudioList","name","singer","artist","cover","artwork_url","musicSrc","resolve","process","env","SOUNDCLOUD_CLIENT_ID","getInstance","play","pauseTrack","pause","preTrack","isCurrentTrackPlaying","MusicPlayerProvider","useCurrentTrack","useIsCurrentTrackPlaying","useMusicPlayerOptions","useAddTrackToAudioList","usePlayTrack","usePauseTrack","value"],"mappings":"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","sourcesContent":["import constate from 'constate';\nimport React, {\n  useRef, useCallback, useState, useMemo,\n} from 'react';\nimport { useImmer } from 'use-immer';\nimport { options, musicPlayer } from '../constants/musicPlayer.constant';\n\n\nconst isCurrentTrack = (trackId, currentTrack) => trackId === currentTrack.id;\n\nconst useMusicPlayer = (params) => {\n  const [currentTrack, setCurrentTrack] = useState({\n    id: 11,\n    playing: false,\n  });\n\n  const onAudioListsChange = React.useCallback(\n    (currentPlayId, audioLists, audioInfo) => {\n      setMusicPlayerOptions((preOptions) => ({\n        ...preOptions,\n        audioLists,\n      }));\n    },\n    [],\n  );\n\n  const onAudioPause = React.useCallback((audioInfo) => {\n    setCurrentTrackPause(parseInt(audioInfo.lyric));\n  }, []);\n\n  const onAudioPlay = React.useCallback((audioInfo) => {\n    setCurrentTrackPlaying(parseInt(audioInfo.lyric));\n  }, []);\n\n  const getAudioInstance = React.useCallback((audioInstance) => {\n    musicPlayer.setInstance(audioInstance);\n  }, []);\n\n  const [musicPlayerOptions, setMusicPlayerOptions] = useState({\n    ...options,\n    onAudioListsChange,\n    getAudioInstance,\n    onAudioPause,\n    onAudioPlay,\n  });\n\n  const playTrack = React.useCallback((track) => {\n    if (!isCurrentTrack(track.id, currentTrack)) {\n      console.log('play diff song', track.id, currentTrack);\n      addTrackToAudioList({\n        name: track.name,\n        singer: track.artist,\n        cover: track.artwork_url,\n        id: track.id,\n        lyric: `${track.id}`,\n        musicSrc: () => Promise.resolve(\n          `https://api.soundcloud.com/tracks/${track.id}/stream?client_id=${process.env.SOUNDCLOUD_CLIENT_ID}`,\n        ),\n      });\n    }\n    musicPlayer.getInstance().play();\n  }, [currentTrack]);\n\n  const pauseTrack = React.useCallback((track) => {\n    musicPlayer.getInstance().pause();\n  }, []);\n\n  const addTrackToAudioList = React.useCallback((track) => {\n    setMusicPlayerOptions((preOptions) => ({\n      ...preOptions, // if use global state: musicPlayerOptions instead of local state: preOptions,\n      // it will cache the initial musicPlayerOptions because of useCallbackOnce\n      // Maybe this doesn't apply for dispatch in useReducer, I don't know\n\n      audioLists: [track, ...preOptions.audioLists],\n    }));\n  }, []);\n\n  const setCurrentTrackPlaying = React.useCallback((trackId) => {\n    setCurrentTrack((preTrack) => {\n      const currentTrack = {\n        id: trackId,\n        playing: true,\n      };\n\n      return currentTrack;\n    });\n  }, []);\n\n  const setCurrentTrackPause = React.useCallback((trackId) => {\n    setCurrentTrack((preTrack) => {\n      const currentTrack = {\n        id: trackId,\n        playing: false,\n      };\n\n      return currentTrack;\n    });\n  }, []);\n\n  const isCurrentTrackPlaying = React.useCallback((trackId) => currentTrack.id === trackId && currentTrack.playing, [currentTrack]);\n\n  return {\n    currentTrack,\n    isCurrentTrackPlaying,\n    musicPlayerOptions,\n    addTrackToAudioList,\n    playTrack,\n    pauseTrack,\n  };\n};\n\nexport const [\n  MusicPlayerProvider,\n  useCurrentTrack,\n  useIsCurrentTrackPlaying,\n  useMusicPlayerOptions,\n  useAddTrackToAudioList,\n  usePlayTrack,\n  usePauseTrack,\n] = constate(\n  useMusicPlayer,\n  (value) => value.currentTrack,\n  (value) => value.isCurrentTrackPlaying,\n  (value) => value.musicPlayerOptions,\n  (value) => value.addTrackToAudioList,\n  (value) => value.playTrack,\n  (value) => value.pauseTrack,\n);\n"]},"metadata":{},"sourceType":"module"}