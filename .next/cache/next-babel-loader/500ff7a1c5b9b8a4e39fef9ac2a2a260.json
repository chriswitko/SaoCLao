{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport constate from 'constate';\nimport React, { useRef, useCallback, useState, useMemo } from 'react';\nimport { useImmer } from 'use-immer';\nimport { options, musicPlayer } from '../constants/musicPlayer.constant';\n\nvar isCurrentTrack = function isCurrentTrack(trackId, currentTrack) {\n  return trackId === currentTrack.id;\n};\n\nvar useMusicPlayer = function useMusicPlayer(params) {\n  var _useState = useState({\n    id: 11,\n    playing: false\n  }),\n      currentTrack = _useState[0],\n      setCurrentTrack = _useState[1];\n\n  var onAudioListsChange = React.useCallback(function (currentPlayId, audioLists, audioInfo) {\n    setMusicPlayerOptions(function (preOptions) {\n      return _objectSpread({}, preOptions, {\n        audioLists: audioLists\n      });\n    });\n  }, []);\n  var onAudioPause = React.useCallback(function (audioInfo) {\n    setCurrentTrackPause(_parseInt(audioInfo.lyric));\n  }, []);\n  var onAudioPlay = React.useCallback(function (audioInfo) {\n    setCurrentTrackPlaying(_parseInt(audioInfo.lyric));\n  }, []);\n  var getAudioInstance = React.useCallback(function (audioInstance) {\n    musicPlayer.setInstance(audioInstance);\n  }, []);\n\n  var _useState2 = useState(_objectSpread({}, options, {\n    onAudioListsChange: onAudioListsChange,\n    getAudioInstance: getAudioInstance,\n    onAudioPause: onAudioPause,\n    onAudioPlay: onAudioPlay\n  })),\n      musicPlayerOptions = _useState2[0],\n      setMusicPlayerOptions = _useState2[1];\n\n  var playTrack = React.useCallback(function (track) {\n    if (!isCurrentTrack(track.id, currentTrack)) {\n      console.log('play diff song', track.id, currentTrack);\n      addTrackToAudioList({\n        name: track.name,\n        singer: track.artist,\n        cover: track.artwork_url,\n        id: track.id,\n        lyric: \"\".concat(track.id),\n        musicSrc: function musicSrc() {\n          return _Promise.resolve(\"https://api.soundcloud.com/tracks/\".concat(track.id, \"/stream?client_id=\").concat(process.env.SOUNDCLOUD_CLIENT_ID));\n        }\n      });\n    }\n\n    musicPlayer.getInstance().play();\n  }, [currentTrack]);\n  var pauseTrack = React.useCallback(function (track) {\n    musicPlayer.getInstance().pause();\n  }, []);\n  var addTrackToAudioList = React.useCallback(function (track) {\n    setMusicPlayerOptions(function (preOptions) {\n      return _objectSpread({}, preOptions, {\n        // if use global state: musicPlayerOptions instead of local state: preOptions,\n        // it will cache the initial musicPlayerOptions because of useCallbackOnce\n        // Maybe this doesn't apply for dispatch in useReducer, I don't know\n        audioLists: [track].concat(_toConsumableArray(preOptions.audioLists))\n      });\n    });\n  }, []);\n  var setCurrentTrackPlaying = React.useCallback(function (trackId) {\n    setCurrentTrack(function (preTrack) {\n      var currentTrack = {\n        id: trackId,\n        playing: true\n      };\n      return currentTrack;\n    });\n  }, []);\n  var setCurrentTrackPause = React.useCallback(function (trackId) {\n    setCurrentTrack(function (preTrack) {\n      var currentTrack = {\n        id: trackId,\n        playing: false\n      };\n      return currentTrack;\n    });\n  }, []);\n  var isCurrentTrackPlaying = React.useCallback(function (trackId) {\n    return currentTrack.id === trackId && currentTrack.playing;\n  }, [currentTrack]);\n  return {\n    currentTrack: currentTrack,\n    isCurrentTrackPlaying: isCurrentTrackPlaying,\n    musicPlayerOptions: musicPlayerOptions,\n    addTrackToAudioList: addTrackToAudioList,\n    playTrack: playTrack,\n    pauseTrack: pauseTrack\n  };\n};\n\nvar _constate = constate(useMusicPlayer, function (value) {\n  return value.currentTrack;\n}, function (value) {\n  return value.isCurrentTrackPlaying;\n}, function (value) {\n  return value.musicPlayerOptions;\n}, function (value) {\n  return value.addTrackToAudioList;\n}, function (value) {\n  return value.playTrack;\n}, function (value) {\n  return value.pauseTrack;\n}),\n    _constate2 = _slicedToArray(_constate, 7),\n    MusicPlayerProvider = _constate2[0],\n    useCurrentTrack = _constate2[1],\n    useIsCurrentTrackPlaying = _constate2[2],\n    useMusicPlayerOptions = _constate2[3],\n    useAddTrackToAudioList = _constate2[4],\n    usePlayTrack = _constate2[5],\n    usePauseTrack = _constate2[6];\n\nexport { MusicPlayerProvider, useCurrentTrack, useIsCurrentTrackPlaying, useMusicPlayerOptions, useAddTrackToAudioList, usePlayTrack, usePauseTrack };","map":null,"metadata":{},"sourceType":"module"}