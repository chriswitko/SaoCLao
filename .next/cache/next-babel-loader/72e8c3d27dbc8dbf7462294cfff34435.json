{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport \"antd/lib/message/style/css\";\nimport _message from \"antd/lib/message\";\nimport { useEffect, useState } from \"react\";\nimport { myApiEndPoint, myApiAxiosInstance } from \"../../constants/myApi.constant\";\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport { useAddFavoriteTrackIds } from \"../../contexts/TrackContext\";\nimport { errorSelector } from \"../../helpers/utils.helper\";\nimport { localStorageService } from \"../../helpers/storage.helper\";\nexport var useFetchFavoriteTrackIds = function useFetchFavoriteTrackIds() {\n  var addFavoriteTrackIds = useAddFavoriteTrackIds();\n\n  var _useAuth = useAuth(),\n      refreshToken = _useAuth.refreshToken;\n\n  useEffect(function () {\n    var fetchFavoriteTrackIds = function fetchFavoriteTrackIds(params) {\n      var res;\n      return _regeneratorRuntime.async(function fetchFavoriteTrackIds$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(myApiAxiosInstance.get(myApiEndPoint.FAVORITE_TRACK_IDS));\n\n            case 3:\n              res = _context.sent;\n              addFavoriteTrackIds(res.data);\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n\n              _message.error(errorSelector(_context.t0));\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 7]]);\n    };\n\n    if (!refreshToken) return; // false mean firebase haven't release token, so throw unauthorized error\n\n    fetchFavoriteTrackIds();\n  }, [refreshToken]);\n};","map":{"version":3,"sources":["C:/Users/PC/WebstormProjects/nextjs/SoundCloudClone/src/hooks/track/useFetchFavoriteTrackIds.js"],"names":["useEffect","useState","myApiEndPoint","myApiAxiosInstance","useAuth","useAddFavoriteTrackIds","errorSelector","localStorageService","useFetchFavoriteTrackIds","addFavoriteTrackIds","refreshToken","fetchFavoriteTrackIds","params","get","FAVORITE_TRACK_IDS","res","data","error"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,SACEC,aADF,EAEEC,kBAFF,QAGO,gCAHP;AAIA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,sBAAT,QAAuC,6BAAvC;AACA,SAASC,aAAT,QAA8B,4BAA9B;AACA,SAASC,mBAAT,QAAoC,8BAApC;AAEA,OAAO,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,GAAM;AAC5C,MAAMC,mBAAmB,GAAGJ,sBAAsB,EAAlD;;AAD4C,iBAEnBD,OAAO,EAFY;AAAA,MAEpCM,YAFoC,YAEpCA,YAFoC;;AAI5CV,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMW,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAMC,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAERT,kBAAkB,CAACU,GAAnB,CAChBX,aAAa,CAACY,kBADE,CAFQ;;AAAA;AAEpBC,cAAAA,GAFoB;AAK1BN,cAAAA,mBAAmB,CAACM,GAAG,CAACC,IAAL,CAAnB;AAL0B;AAAA;;AAAA;AAAA;AAAA;;AAO1B,uBAAQC,KAAR,CAAcX,aAAa,aAA3B;;AAP0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA9B;;AAUA,QAAI,CAACI,YAAL,EAAmB,OAXL,CAWa;;AAC3BC,IAAAA,qBAAqB;AACtB,GAbQ,EAaN,CAACD,YAAD,CAbM,CAAT;AAcD,CAlBM","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { message } from \"antd\";\nimport {\n  myApiEndPoint,\n  myApiAxiosInstance\n} from \"../../constants/myApi.constant\";\nimport { useAuth } from \"../../contexts/AuthContext\";\nimport { useAddFavoriteTrackIds } from \"../../contexts/TrackContext\";\nimport { errorSelector } from \"../../helpers/utils.helper\";\nimport { localStorageService } from \"../../helpers/storage.helper\";\n\nexport const useFetchFavoriteTrackIds = () => {\n  const addFavoriteTrackIds = useAddFavoriteTrackIds();\n  const { refreshToken } = useAuth();\n\n  useEffect(() => {\n    const fetchFavoriteTrackIds = async params => {\n      try {\n        const res = await myApiAxiosInstance.get(\n          myApiEndPoint.FAVORITE_TRACK_IDS\n        );\n        addFavoriteTrackIds(res.data);\n      } catch (error) {\n        message.error(errorSelector(error));\n      }\n    };\n    if (!refreshToken) return; // false mean firebase haven't release token, so throw unauthorized error\n    fetchFavoriteTrackIds();\n  }, [refreshToken]);\n};\n"]},"metadata":{},"sourceType":"module"}