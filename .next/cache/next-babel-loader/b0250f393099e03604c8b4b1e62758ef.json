{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useReducer, useCallback, useMemo, useEffect } from 'react';\nimport constate from 'constate';\nimport { useImmerReducer } from 'use-immer';\nimport pull from 'lodash/pull';\nimport remove from 'lodash/remove';\nimport { trackActionTypes } from '../constants/actionTypes.constant';\nimport { myApiEndPoint, myApiAxiosInstance } from '../constants/myApi.constant';\nimport { convertArrayToObject, findObjectsByKeys } from '../helpers/utils.helper';\nconst initialState = {\n  tracks: {},\n  trendingTracks: [],\n  favoriteTracks: [],\n  favoriteTrackIds: []\n};\n\nconst reducer = (state = initialState, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case trackActionTypes.TRENDING_TRACKS_FETCHED_SUCCESS:\n      const newTracks = convertArrayToObject(payload, 'id');\n\n      const newTrackIds = _Object$keys(newTracks).map(Number);\n\n      return void (state.tracks = _objectSpread({}, newTracks, {}, state.tracks), state.trendingTracks.push(...newTrackIds));\n\n    case trackActionTypes.FAVORITE_TRACKS_FETCHED_SUCCESS:\n      return void (state.favoriteTracks = payload);\n\n    case trackActionTypes.FAVORITE_TRACKS_IDS_FETCHED_SUCCESS:\n      return void (state.favoriteTrackIds = payload);\n\n    case trackActionTypes.ADD_FAVORITE_TRACK:\n      return void (state.favoriteTrackIds.push(payload.id), state.tracks[payload.id].count_like += 1);\n\n    case trackActionTypes.REMOVE_FAVORITE_TRACK:\n      return void (pull(state.favoriteTrackIds, payload.id), state.tracks[payload.id].count_like -= 1);\n\n    default:\n      return state;\n  }\n};\n\nconst useTrack = () => {\n  const [state, dispatch] = useImmerReducer(reducer, initialState);\n  const addTrendingTracks = useCallback(data => {\n    // useCallbackOnce here helps prevent previous tracks re-rendering\n    dispatch({\n      type: trackActionTypes.TRENDING_TRACKS_FETCHED_SUCCESS,\n      payload: data\n    });\n  }, []);\n  const addFavoriteTrackIds = useCallback(data => {\n    dispatch({\n      type: trackActionTypes.FAVORITE_TRACKS_IDS_FETCHED_SUCCESS,\n      payload: data\n    });\n  }, []);\n  const checkIsFavoriteTrack = useCallback(trackId => {\n    const isFavoriteTrack = state.favoriteTrackIds.includes(trackId);\n    return isFavoriteTrack;\n  }, [state.favoriteTrackIds]);\n  const addFavoriteTrack = useCallback(trackObj => {\n    dispatch({\n      type: trackActionTypes.ADD_FAVORITE_TRACK,\n      // desc order insertion\n      payload: trackObj\n    });\n  }, []);\n  const removeFavoriteTrack = useCallback(trackObj => {\n    dispatch({\n      type: trackActionTypes.REMOVE_FAVORITE_TRACK,\n      payload: trackObj\n    });\n  }, []);\n  return {\n    tracks: state.tracks,\n    favoriteTrackIds: state.favoriteTrackIds,\n    trendingTracks: findObjectsByKeys(state.trendingTracks, state.tracks),\n    addFavoriteTrackIds,\n    checkIsFavoriteTrack,\n    addFavoriteTrack,\n    addTrendingTracks,\n    removeFavoriteTrack\n  };\n};\n\nexport const [TrackProvider, useTracks, useTrendingTracks, useAddFavoriteTrackIds, useIsFavoriteTrack, useAddFavoriteTrack, useAddTrendingTracks, useRemoveFavoriteTrack] = constate(useTrack, value => value.tracks, value => value.trendingTracks, value => value.addFavoriteTrackIds, value => value.checkIsFavoriteTrack, value => value.addFavoriteTrack, value => value.addTrendingTracks, value => value.removeFavoriteTrack);","map":null,"metadata":{},"sourceType":"module"}