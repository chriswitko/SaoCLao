{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport \"antd/lib/message/style/css\";\nimport _message from \"antd/lib/message\";\nimport _ from \"lodash\";\nimport { useState, useEffect, useMemo } from \"react\";\nimport { myApiEndPoint, myApiAxiosInstance } from \"../../constants/myApi.constant\";\nimport { errorSelector } from \"../../helpers/utils.helper\";\nimport { useTrendingTracks, useAddTrendingTracks } from \"../../contexts/TrackContext\";\nexport var usePublicTracks = function usePublicTracks(endpoint, limit) {\n  var trendingTracks = useTrendingTracks();\n  var addTrendingTracks = useAddTrendingTracks();\n\n  var _useState = useState(\"\"),\n      offset = _useState[0],\n      setOffset = _useState[1];\n\n  var _useState2 = useState(true),\n      hasMore = _useState2[0],\n      setHasMore = _useState2[1];\n\n  var loadMore = function loadMore(params) {\n    var res;\n    return _regeneratorRuntime.async(function loadMore$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (hasMore) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            _context.prev = 2;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(myApiAxiosInstance.get(endpoint, {\n              params: {\n                limit: limit,\n                lastVisible: offset\n              }\n            }));\n\n          case 5:\n            res = _context.sent;\n            if (res.data.lastVisible == \"end\") setHasMore(false);\n            addTrendingTracks(res.data.collection);\n            setOffset(res.data.lastVisible);\n            _context.next = 14;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](2);\n\n            _message.error(errorSelector(_context.t0));\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[2, 11]]);\n  };\n\n  useEffect(function () {\n    loadMore();\n  }, []);\n  return {\n    trendingTracks: trendingTracks,\n    loadMore: loadMore,\n    hasMore: hasMore\n  };\n};","map":{"version":3,"sources":["C:/Users/PC/WebstormProjects/nextjs/SoundCloudClone/src/hooks/track/usePublicTracks.js"],"names":["_","useState","useEffect","useMemo","myApiEndPoint","myApiAxiosInstance","errorSelector","useTrendingTracks","useAddTrendingTracks","usePublicTracks","endpoint","limit","trendingTracks","addTrendingTracks","offset","setOffset","hasMore","setHasMore","loadMore","params","get","lastVisible","res","data","collection","error"],"mappings":";;;AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,OAA9B,QAA6C,OAA7C;AAEA,SACEC,aADF,EAEEC,kBAFF,QAGO,gCAHP;AAIA,SAASC,aAAT,QAA8B,4BAA9B;AACA,SACEC,iBADF,EAEEC,oBAFF,QAGO,6BAHP;AAKA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,QAAD,EAAWC,KAAX,EAAqB;AAClD,MAAMC,cAAc,GAAGL,iBAAiB,EAAxC;AACA,MAAMM,iBAAiB,GAAGL,oBAAoB,EAA9C;;AAFkD,kBAGtBP,QAAQ,CAAC,EAAD,CAHc;AAAA,MAG3Ca,MAH2C;AAAA,MAGnCC,SAHmC;;AAAA,mBAIpBd,QAAQ,CAAC,IAAD,CAJY;AAAA,MAI3Ce,OAJ2C;AAAA,MAIlCC,UAJkC;;AAMlD,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAMC,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACVH,OADU;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA,6CAKKX,kBAAkB,CAACe,GAAnB,CAAuBV,QAAvB,EAAiC;AACjDS,cAAAA,MAAM,EAAE;AACNR,gBAAAA,KAAK,EAALA,KADM;AAENU,gBAAAA,WAAW,EAAEP;AAFP;AADyC,aAAjC,CALL;;AAAA;AAKPQ,YAAAA,GALO;AAWb,gBAAIA,GAAG,CAACC,IAAJ,CAASF,WAAT,IAAwB,KAA5B,EAAmCJ,UAAU,CAAC,KAAD,CAAV;AACnCJ,YAAAA,iBAAiB,CAACS,GAAG,CAACC,IAAJ,CAASC,UAAV,CAAjB;AACAT,YAAAA,SAAS,CAACO,GAAG,CAACC,IAAJ,CAASF,WAAV,CAAT;AAba;AAAA;;AAAA;AAAA;AAAA;;AAeb,qBAAQI,KAAR,CAAcnB,aAAa,aAA3B;;AAfa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAmBAJ,EAAAA,SAAS,CAAC,YAAM;AACdgB,IAAAA,QAAQ;AACT,GAFQ,EAEN,EAFM,CAAT;AAIA,SAAO;AACLN,IAAAA,cAAc,EAAdA,cADK;AAELM,IAAAA,QAAQ,EAARA,QAFK;AAGLF,IAAAA,OAAO,EAAPA;AAHK,GAAP;AAKD,CAlCM","sourcesContent":["import _ from \"lodash\";\nimport { useState, useEffect, useMemo } from \"react\";\nimport { message } from \"antd\";\nimport {\n  myApiEndPoint,\n  myApiAxiosInstance\n} from \"../../constants/myApi.constant\";\nimport { errorSelector } from \"../../helpers/utils.helper\";\nimport {\n  useTrendingTracks,\n  useAddTrendingTracks\n} from \"../../contexts/TrackContext\";\n\nexport const usePublicTracks = (endpoint, limit) => {\n  const trendingTracks = useTrendingTracks();\n  const addTrendingTracks = useAddTrendingTracks();\n  const [offset, setOffset] = useState(\"\");\n  const [hasMore, setHasMore] = useState(true);\n\n  const loadMore = async params => {\n    if (!hasMore) {\n      return;\n    }\n    try {\n      const res = await myApiAxiosInstance.get(endpoint, {\n        params: {\n          limit,\n          lastVisible: offset\n        }\n      });\n      if (res.data.lastVisible == \"end\") setHasMore(false);\n      addTrendingTracks(res.data.collection);\n      setOffset(res.data.lastVisible);\n    } catch (error) {\n      message.error(errorSelector(error));\n    }\n  };\n\n  useEffect(() => {\n    loadMore();\n  }, []);\n\n  return {\n    trendingTracks,\n    loadMore,\n    hasMore\n  };\n};\n"]},"metadata":{},"sourceType":"module"}