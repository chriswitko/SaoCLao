{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport constate from 'constate';\nimport { firebase } from '../constants/firebase.constant';\nimport { myApiAxiosInstance } from '../constants/myApi.constant';\nimport { localStorageService } from '../helpers/storage.helper';\n\nconst useAuther = () => {\n  const [user, setUser] = React.useState(null);\n  const [refreshToken, setRefreshToken] = React.useState(null);\n  React.useEffect(() => {\n    // Listen for auth state changes\n    const unsubscribe = firebase.auth().onAuthStateChanged(async user => {\n      if (user) {\n        const tokenResult = await firebase.auth().currentUser.getIdTokenResult(true);\n        localStorageService.setToken(tokenResult.token);\n        setRefreshToken(true);\n        setUser(_objectSpread({}, user, {\n          admin: tokenResult.claims.admin,\n          username: user.displayName\n        }));\n      } else {\n        localStorageService.removeToken();\n        setUser(null);\n      }\n    }); // Unsubscribe to the listener when unmounting\n\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  const loginWithEmail = async (email, password) => {\n    await firebase.auth().signInWithEmailAndPassword(email, password);\n    window.location.reload();\n    localStorageService.setToken('authenticated'); // for showing user section quickly when token is empty because google auth is slow\n  };\n\n  const signOut = () => {\n    firebase.auth().signOut();\n    window.location.reload();\n  };\n\n  return {\n    user,\n    refreshToken,\n    loginWithEmail,\n    signOut\n  };\n};\n\nexport const [AuthProvider, useAuth] = constate(useAuther);","map":{"version":3,"sources":["C:/Users/PC/WebstormProjects/nextjs/SoundCloudClone/src/contexts/AuthContext.js"],"names":["React","useState","useCallback","useEffect","constate","firebase","myApiAxiosInstance","localStorageService","useAuther","user","setUser","refreshToken","setRefreshToken","unsubscribe","auth","onAuthStateChanged","tokenResult","currentUser","getIdTokenResult","setToken","token","admin","claims","username","displayName","removeToken","loginWithEmail","email","password","signInWithEmailAndPassword","window","location","reload","signOut","AuthProvider","useAuth"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,SAAvC,QAAwD,OAAxD;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,SAASC,QAAT,QAAyB,gCAAzB;AACA,SAASC,kBAAT,QAAmC,6BAAnC;AACA,SAASC,mBAAT,QAAoC,2BAApC;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACtB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,KAAK,CAACC,QAAN,CAAe,IAAf,CAAxB;AACA,QAAM,CAACU,YAAD,EAAeC,eAAf,IAAkCZ,KAAK,CAACC,QAAN,CAAe,IAAf,CAAxC;AAEAD,EAAAA,KAAK,CAACG,SAAN,CAAgB,MAAM;AACpB;AACA,UAAMU,WAAW,GAAGR,QAAQ,CAACS,IAAT,GAAgBC,kBAAhB,CAAmC,MAAON,IAAP,IAAgB;AACrE,UAAIA,IAAJ,EAAU;AACR,cAAMO,WAAW,GAAG,MAAMX,QAAQ,CAC/BS,IADuB,GAEvBG,WAFuB,CAEXC,gBAFW,CAEM,IAFN,CAA1B;AAIAX,QAAAA,mBAAmB,CAACY,QAApB,CAA6BH,WAAW,CAACI,KAAzC;AACAR,QAAAA,eAAe,CAAC,IAAD,CAAf;AACAF,QAAAA,OAAO,mBACFD,IADE;AAELY,UAAAA,KAAK,EAAEL,WAAW,CAACM,MAAZ,CAAmBD,KAFrB;AAGLE,UAAAA,QAAQ,EAAEd,IAAI,CAACe;AAHV,WAAP;AAKD,OAZD,MAYO;AACLjB,QAAAA,mBAAmB,CAACkB,WAApB;AACAf,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,KAjBmB,CAApB,CAFoB,CAqBpB;;AACA,WAAO,MAAM;AACXG,MAAAA,WAAW;AACZ,KAFD;AAGD,GAzBD,EAyBG,EAzBH;;AA2BA,QAAMa,cAAc,GAAG,OAAOC,KAAP,EAAcC,QAAd,KAA2B;AAChD,UAAMvB,QAAQ,CAACS,IAAT,GAAgBe,0BAAhB,CAA2CF,KAA3C,EAAkDC,QAAlD,CAAN;AACAE,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACAzB,IAAAA,mBAAmB,CAACY,QAApB,CAA6B,eAA7B,EAHgD,CAGD;AAChD,GAJD;;AAMA,QAAMc,OAAO,GAAG,MAAM;AACpB5B,IAAAA,QAAQ,CAACS,IAAT,GAAgBmB,OAAhB;AACAH,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD,GAHD;;AAIA,SAAO;AACLvB,IAAAA,IADK;AAELE,IAAAA,YAFK;AAGLe,IAAAA,cAHK;AAILO,IAAAA;AAJK,GAAP;AAMD,CA/CD;;AAiDA,OAAO,MAAM,CAACC,YAAD,EAAeC,OAAf,IAA0B/B,QAAQ,CAACI,SAAD,CAAxC","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport constate from 'constate';\nimport { firebase } from '../constants/firebase.constant';\nimport { myApiAxiosInstance } from '../constants/myApi.constant';\nimport { localStorageService } from '../helpers/storage.helper';\n\nconst useAuther = () => {\n  const [user, setUser] = React.useState(null);\n  const [refreshToken, setRefreshToken] = React.useState(null);\n\n  React.useEffect(() => {\n    // Listen for auth state changes\n    const unsubscribe = firebase.auth().onAuthStateChanged(async (user) => {\n      if (user) {\n        const tokenResult = await firebase\n          .auth()\n          .currentUser.getIdTokenResult(true);\n\n        localStorageService.setToken(tokenResult.token);\n        setRefreshToken(true);\n        setUser({\n          ...user,\n          admin: tokenResult.claims.admin,\n          username: user.displayName,\n        });\n      } else {\n        localStorageService.removeToken();\n        setUser(null);\n      }\n    });\n\n    // Unsubscribe to the listener when unmounting\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  const loginWithEmail = async (email, password) => {\n    await firebase.auth().signInWithEmailAndPassword(email, password);\n    window.location.reload();\n    localStorageService.setToken('authenticated'); // for showing user section quickly when token is empty because google auth is slow\n  };\n\n  const signOut = () => {\n    firebase.auth().signOut();\n    window.location.reload();\n  };\n  return {\n    user,\n    refreshToken,\n    loginWithEmail,\n    signOut,\n  };\n};\n\nexport const [AuthProvider, useAuth] = constate(useAuther);\n"]},"metadata":{},"sourceType":"module"}