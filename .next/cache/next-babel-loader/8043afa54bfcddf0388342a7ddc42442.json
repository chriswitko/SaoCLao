{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport constate from 'constate';\nimport React, { useRef, useCallback, useState, useMemo } from 'react';\nimport { useImmer } from 'use-immer';\nimport { options, musicPlayer } from '../constants/musicPlayer.constant';\n\nvar isCurrentTrack = function isCurrentTrack(trackId, currentTrack) {\n  return trackId === currentTrack.id;\n};\n\nvar useMusicPlayer = function useMusicPlayer(params) {\n  var _useState = useState({\n    id: 11,\n    playing: false\n  }),\n      currentTrack = _useState[0],\n      setCurrentTrack = _useState[1];\n\n  var onAudioListsChange = React.useCallback(function (currentPlayId, audioLists, audioInfo) {\n    setMusicPlayerOptions(function (preOptions) {\n      return _objectSpread({}, preOptions, {\n        audioLists: audioLists\n      });\n    });\n  }, []);\n  var onAudioPause = React.useCallback(function (audioInfo) {\n    setCurrentTrackPause(_parseInt(audioInfo.lyric));\n  }, []);\n  var onAudioPlay = React.useCallback(function (audioInfo) {\n    setCurrentTrackPlaying(_parseInt(audioInfo.lyric));\n  }, []);\n  var getAudioInstance = React.useCallback(function (audioInstance) {\n    musicPlayer.setInstance(audioInstance);\n  }, []);\n\n  var _useState2 = useState(_objectSpread({}, options, {\n    onAudioListsChange: onAudioListsChange,\n    getAudioInstance: getAudioInstance,\n    onAudioPause: onAudioPause,\n    onAudioPlay: onAudioPlay\n  })),\n      musicPlayerOptions = _useState2[0],\n      setMusicPlayerOptions = _useState2[1];\n\n  var playTrack = React.useCallback(function (track) {\n    if (!isCurrentTrack(track.id, currentTrack)) {\n      console.log('play diff song', track.id, currentTrack);\n      addTrackToAudioList({\n        name: track.name,\n        singer: track.artist,\n        cover: track.artwork_url,\n        id: track.id,\n        lyric: \"\".concat(track.id),\n        musicSrc: function musicSrc() {\n          return _Promise.resolve(\"https://api.soundcloud.com/tracks/\".concat(track.id, \"/stream?client_id=\").concat(process.env.SOUNDCLOUD_CLIENT_ID));\n        }\n      });\n    }\n\n    musicPlayer.getInstance().play();\n  }, [currentTrack]);\n  var pauseTrack = React.useCallback(function (track) {\n    musicPlayer.getInstance().pause();\n  }, []);\n  var addTrackToAudioList = React.useCallback(function (track) {\n    setMusicPlayerOptions(function (preOptions) {\n      return _objectSpread({}, preOptions, {\n        // if use global state: musicPlayerOptions instead of local state: preOptions,\n        // it will cache the initial musicPlayerOptions because of useCallbackOnce\n        // Maybe this doesn't apply for dispatch in useReducer, I don't know\n        audioLists: [track].concat(_toConsumableArray(preOptions.audioLists))\n      });\n    });\n  }, []);\n  var setCurrentTrackPlaying = React.useCallback(function (trackId) {\n    setCurrentTrack(function (preTrack) {\n      var currentTrack = {\n        id: trackId,\n        playing: true\n      };\n      return currentTrack;\n    });\n  }, []);\n  var setCurrentTrackPause = React.useCallback(function (trackId) {\n    setCurrentTrack(function (preTrack) {\n      var currentTrack = {\n        id: trackId,\n        playing: false\n      };\n      return currentTrack;\n    });\n  }, []);\n  var isCurrentTrackPlaying = React.useCallback(function (trackId) {\n    return currentTrack.id === trackId && currentTrack.playing;\n  }, [currentTrack]);\n  return {\n    currentTrack: currentTrack,\n    isCurrentTrackPlaying: isCurrentTrackPlaying,\n    musicPlayerOptions: musicPlayerOptions,\n    addTrackToAudioList: addTrackToAudioList,\n    playTrack: playTrack,\n    pauseTrack: pauseTrack\n  };\n};\n\nvar _constate = constate(useMusicPlayer, function (value) {\n  return value.currentTrack;\n}, function (value) {\n  return value.isCurrentTrackPlaying;\n}, function (value) {\n  return value.musicPlayerOptions;\n}, function (value) {\n  return value.addTrackToAudioList;\n}, function (value) {\n  return value.playTrack;\n}, function (value) {\n  return value.pauseTrack;\n}),\n    _constate2 = _slicedToArray(_constate, 7),\n    MusicPlayerProvider = _constate2[0],\n    useCurrentTrack = _constate2[1],\n    useIsCurrentTrackPlaying = _constate2[2],\n    useMusicPlayerOptions = _constate2[3],\n    useAddTrackToAudioList = _constate2[4],\n    usePlayTrack = _constate2[5],\n    usePauseTrack = _constate2[6];\n\nexport { MusicPlayerProvider, useCurrentTrack, useIsCurrentTrackPlaying, useMusicPlayerOptions, useAddTrackToAudioList, usePlayTrack, usePauseTrack };","map":{"version":3,"sources":["C:/Users/PC/WebstormProjects/nextjs/SoundCloudClone/src/contexts/MusicPlayerContext.js"],"names":["constate","React","useRef","useCallback","useState","useMemo","useImmer","options","musicPlayer","isCurrentTrack","trackId","currentTrack","id","useMusicPlayer","params","playing","setCurrentTrack","onAudioListsChange","currentPlayId","audioLists","audioInfo","setMusicPlayerOptions","preOptions","onAudioPause","setCurrentTrackPause","lyric","onAudioPlay","setCurrentTrackPlaying","getAudioInstance","audioInstance","setInstance","musicPlayerOptions","playTrack","track","console","log","addTrackToAudioList","name","singer","artist","cover","artwork_url","musicSrc","resolve","process","env","SOUNDCLOUD_CLIENT_ID","getInstance","play","pauseTrack","pause","preTrack","isCurrentTrackPlaying","value","MusicPlayerProvider","useCurrentTrack","useIsCurrentTrackPlaying","useMusicPlayerOptions","useAddTrackToAudioList","usePlayTrack","usePauseTrack"],"mappings":"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","sourcesContent":["import constate from 'constate';\nimport React, {\n  useRef, useCallback, useState, useMemo,\n} from 'react';\nimport { useImmer } from 'use-immer';\nimport { options, musicPlayer } from '../constants/musicPlayer.constant';\n\n\nconst isCurrentTrack = (trackId, currentTrack) => trackId === currentTrack.id;\n\nconst useMusicPlayer = (params) => {\n  const [currentTrack, setCurrentTrack] = useState({\n    id: 11,\n    playing: false,\n  });\n\n  const onAudioListsChange = React.useCallback(\n    (currentPlayId, audioLists, audioInfo) => {\n      setMusicPlayerOptions((preOptions) => ({\n        ...preOptions,\n        audioLists,\n      }));\n    },\n    [],\n  );\n\n  const onAudioPause = React.useCallback((audioInfo) => {\n    setCurrentTrackPause(parseInt(audioInfo.lyric));\n  }, []);\n\n  const onAudioPlay = React.useCallback((audioInfo) => {\n    setCurrentTrackPlaying(parseInt(audioInfo.lyric));\n  }, []);\n\n  const getAudioInstance = React.useCallback((audioInstance) => {\n    musicPlayer.setInstance(audioInstance);\n  }, []);\n\n  const [musicPlayerOptions, setMusicPlayerOptions] = useState({\n    ...options,\n    onAudioListsChange,\n    getAudioInstance,\n    onAudioPause,\n    onAudioPlay,\n  });\n\n  const playTrack = React.useCallback((track) => {\n    if (!isCurrentTrack(track.id, currentTrack)) {\n      console.log('play diff song', track.id, currentTrack);\n      addTrackToAudioList({\n        name: track.name,\n        singer: track.artist,\n        cover: track.artwork_url,\n        id: track.id,\n        lyric: `${track.id}`,\n        musicSrc: () => Promise.resolve(\n          `https://api.soundcloud.com/tracks/${track.id}/stream?client_id=${process.env.SOUNDCLOUD_CLIENT_ID}`,\n        ),\n      });\n    }\n    musicPlayer.getInstance().play();\n  }, [currentTrack]);\n\n  const pauseTrack = React.useCallback((track) => {\n    musicPlayer.getInstance().pause();\n  }, []);\n\n  const addTrackToAudioList = React.useCallback((track) => {\n    setMusicPlayerOptions((preOptions) => ({\n      ...preOptions, // if use global state: musicPlayerOptions instead of local state: preOptions,\n      // it will cache the initial musicPlayerOptions because of useCallbackOnce\n      // Maybe this doesn't apply for dispatch in useReducer, I don't know\n\n      audioLists: [track, ...preOptions.audioLists],\n    }));\n  }, []);\n\n  const setCurrentTrackPlaying = React.useCallback((trackId) => {\n    setCurrentTrack((preTrack) => {\n      const currentTrack = {\n        id: trackId,\n        playing: true,\n      };\n\n      return currentTrack;\n    });\n  }, []);\n\n  const setCurrentTrackPause = React.useCallback((trackId) => {\n    setCurrentTrack((preTrack) => {\n      const currentTrack = {\n        id: trackId,\n        playing: false,\n      };\n\n      return currentTrack;\n    });\n  }, []);\n\n  const isCurrentTrackPlaying = React.useCallback((trackId) => currentTrack.id === trackId && currentTrack.playing, [currentTrack]);\n\n  return {\n    currentTrack,\n    isCurrentTrackPlaying,\n    musicPlayerOptions,\n    addTrackToAudioList,\n    playTrack,\n    pauseTrack,\n  };\n};\n\nexport const [\n  MusicPlayerProvider,\n  useCurrentTrack,\n  useIsCurrentTrackPlaying,\n  useMusicPlayerOptions,\n  useAddTrackToAudioList,\n  usePlayTrack,\n  usePauseTrack,\n] = constate(\n  useMusicPlayer,\n  (value) => value.currentTrack,\n  (value) => value.isCurrentTrackPlaying,\n  (value) => value.musicPlayerOptions,\n  (value) => value.addTrackToAudioList,\n  (value) => value.playTrack,\n  (value) => value.pauseTrack,\n);\n"]},"metadata":{},"sourceType":"module"}