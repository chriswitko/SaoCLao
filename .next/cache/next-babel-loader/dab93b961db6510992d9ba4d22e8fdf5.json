{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport constate from 'constate';\nimport { useState, useCallback } from 'react';\n\nvar useSingleModal = function useSingleModal(params) {\n  var _useState = useState(false),\n      isModalShowing = _useState[0],\n      setIsModalShowing = _useState[1];\n\n  var _useState2 = useState(null),\n      modalContent = _useState2[0],\n      setModalContent = _useState2[1];\n\n  var toggleModal = useCallback(function () {\n    setIsModalShowing(function (pre) {\n      return !pre;\n    });\n  }, []);\n\n  var closeModal = function closeModal() {\n    setIsModalShowing(false);\n  };\n\n  var openModal = function openModal() {\n    setIsModalShowing(true);\n  };\n\n  var setContent = function setContent(content) {\n    setModalContent(content);\n  };\n\n  var toggleModalWithContent = useCallback(function (content) {\n    openModal();\n    setContent(content);\n  }, []);\n  return {\n    isModalShowing: isModalShowing,\n    toggleModal: toggleModal,\n    modalContent: modalContent,\n    toggleModalWithContent: toggleModalWithContent\n  };\n};\n\nvar _constate = constate(useSingleModal, function (value) {\n  return value.isModalShowing;\n}, function (value) {\n  return value.toggleModal;\n}, function (value) {\n  return value.modalContent;\n}, function (value) {\n  return value.toggleModalWithContent;\n}),\n    _constate2 = _slicedToArray(_constate, 5),\n    SingleModalProvider = _constate2[0],\n    useIsModalShowing = _constate2[1],\n    useToggleModal = _constate2[2],\n    useModalContent = _constate2[3],\n    useToggleModalWithContent = _constate2[4];\n\nexport { SingleModalProvider, useIsModalShowing, useToggleModal, useModalContent, useToggleModalWithContent };","map":{"version":3,"sources":["C:/Users/PC/WebstormProjects/nextjs/SoundCloudClone/src/contexts/SingleModalContext.js"],"names":["constate","useState","useCallback","useSingleModal","params","isModalShowing","setIsModalShowing","modalContent","setModalContent","toggleModal","pre","closeModal","openModal","setContent","content","toggleModalWithContent","value","SingleModalProvider","useIsModalShowing","useToggleModal","useModalContent","useToggleModalWithContent"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,UAArB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,MAAD,EAAY;AAAA,kBACWH,QAAQ,CAAC,KAAD,CADnB;AAAA,MAC1BI,cAD0B;AAAA,MACVC,iBADU;;AAAA,mBAEOL,QAAQ,CAAC,IAAD,CAFf;AAAA,MAE1BM,YAF0B;AAAA,MAEZC,eAFY;;AAIjC,MAAMC,WAAW,GAAGP,WAAW,CAAC,YAAM;AACpCI,IAAAA,iBAAiB,CAAC,UAACI,GAAD;AAAA,aAAS,CAACA,GAAV;AAAA,KAAD,CAAjB;AACD,GAF8B,EAE5B,EAF4B,CAA/B;;AAIA,MAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvBL,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACD,GAFD;;AAIA,MAAMM,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtBN,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD,GAFD;;AAIA,MAAMO,UAAU,GAAG,SAAbA,UAAa,CAACC,OAAD,EAAa;AAC9BN,IAAAA,eAAe,CAACM,OAAD,CAAf;AACD,GAFD;;AAIA,MAAMC,sBAAsB,GAAGb,WAAW,CAAC,UAACY,OAAD,EAAa;AACtDF,IAAAA,SAAS;AACTC,IAAAA,UAAU,CAACC,OAAD,CAAV;AACD,GAHyC,EAGvC,EAHuC,CAA1C;AAKA,SAAO;AACLT,IAAAA,cAAc,EAAdA,cADK;AAELI,IAAAA,WAAW,EAAXA,WAFK;AAGLF,IAAAA,YAAY,EAAZA,YAHK;AAILQ,IAAAA,sBAAsB,EAAtBA;AAJK,GAAP;AAMD,CA/BD;;gBAuCIf,QAAQ,CACVG,cADU,EAEV,UAACa,KAAD;AAAA,SAAWA,KAAK,CAACX,cAAjB;AAAA,CAFU,EAGV,UAACW,KAAD;AAAA,SAAWA,KAAK,CAACP,WAAjB;AAAA,CAHU,EAIV,UAACO,KAAD;AAAA,SAAWA,KAAK,CAACT,YAAjB;AAAA,CAJU,EAKV,UAACS,KAAD;AAAA,SAAWA,KAAK,CAACD,sBAAjB;AAAA,CALU,C;;IALVE,mB;IACAC,iB;IACAC,c;IACAC,e;IACAC,yB","sourcesContent":["import constate from 'constate';\nimport { useState, useCallback } from 'react';\n\nconst useSingleModal = (params) => {\n  const [isModalShowing, setIsModalShowing] = useState(false);\n  const [modalContent, setModalContent] = useState(null);\n\n  const toggleModal = useCallback(() => {\n    setIsModalShowing((pre) => !pre);\n  }, []);\n\n  const closeModal = () => {\n    setIsModalShowing(false);\n  };\n\n  const openModal = () => {\n    setIsModalShowing(true);\n  };\n\n  const setContent = (content) => {\n    setModalContent(content);\n  };\n\n  const toggleModalWithContent = useCallback((content) => {\n    openModal();\n    setContent(content);\n  }, []);\n\n  return {\n    isModalShowing,\n    toggleModal,\n    modalContent,\n    toggleModalWithContent,\n  };\n};\n\nexport const [\n  SingleModalProvider,\n  useIsModalShowing,\n  useToggleModal,\n  useModalContent,\n  useToggleModalWithContent,\n] = constate(\n  useSingleModal,\n  (value) => value.isModalShowing,\n  (value) => value.toggleModal,\n  (value) => value.modalContent,\n  (value) => value.toggleModalWithContent,\n);\n"]},"metadata":{},"sourceType":"module"}