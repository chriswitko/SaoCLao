{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useReducer, useCallback, useMemo, useEffect } from 'react';\nimport constate from 'constate';\nimport { useImmerReducer } from 'use-immer';\nimport pull from 'lodash/pull';\nimport remove from 'lodash/remove';\nimport { trackActionTypes } from '../constants/actionTypes.constant';\nimport { myApiEndPoint, myApiAxiosInstance } from '../constants/myApi.constant';\nimport { convertArrayToObject, findObjectsByKeys } from '../helpers/utils.helper';\nvar initialState = {\n  tracks: {},\n  trendingTracks: [],\n  favoriteTracks: [],\n  favoriteTrackIds: []\n};\n\nvar reducer = function reducer() {\n  var _state$trendingTracks;\n\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n\n  var _ref = arguments.length > 1 ? arguments[1] : undefined,\n      type = _ref.type,\n      payload = _ref.payload;\n\n  switch (type) {\n    case trackActionTypes.TRENDING_TRACKS_FETCHED_SUCCESS:\n      var newTracks = convertArrayToObject(payload, 'id');\n\n      var newTrackIds = _Object$keys(newTracks).map(Number);\n\n      return void (state.tracks = _objectSpread({}, newTracks, {}, state.tracks), (_state$trendingTracks = state.trendingTracks).push.apply(_state$trendingTracks, _toConsumableArray(newTrackIds)));\n\n    case trackActionTypes.FAVORITE_TRACKS_FETCHED_SUCCESS:\n      return void (state.favoriteTracks = payload);\n\n    case trackActionTypes.FAVORITE_TRACKS_IDS_FETCHED_SUCCESS:\n      return void (state.favoriteTrackIds = payload);\n\n    case trackActionTypes.ADD_FAVORITE_TRACK:\n      return void (state.favoriteTrackIds.push(payload.id), state.tracks[payload.id].count_like += 1);\n\n    case trackActionTypes.REMOVE_FAVORITE_TRACK:\n      return void (pull(state.favoriteTrackIds, payload.id), state.tracks[payload.id].count_like -= 1);\n\n    default:\n      return state;\n  }\n};\n\nvar useTrack = function useTrack() {\n  var _useImmerReducer = useImmerReducer(reducer, initialState),\n      _useImmerReducer2 = _slicedToArray(_useImmerReducer, 2),\n      state = _useImmerReducer2[0],\n      dispatch = _useImmerReducer2[1];\n\n  var addTrendingTracks = useCallback(function (data) {\n    // useCallbackOnce here helps prevent previous tracks re-rendering\n    dispatch({\n      type: trackActionTypes.TRENDING_TRACKS_FETCHED_SUCCESS,\n      payload: data\n    });\n  }, []);\n  var addFavoriteTrackIds = useCallback(function (data) {\n    dispatch({\n      type: trackActionTypes.FAVORITE_TRACKS_IDS_FETCHED_SUCCESS,\n      payload: data\n    });\n  }, []);\n  var checkIsFavoriteTrack = useCallback(function (trackId) {\n    var isFavoriteTrack = state.favoriteTrackIds.includes(trackId);\n    return isFavoriteTrack;\n  }, [state.favoriteTrackIds]);\n  var addFavoriteTrack = useCallback(function (trackObj) {\n    dispatch({\n      type: trackActionTypes.ADD_FAVORITE_TRACK,\n      // desc order insertion\n      payload: trackObj\n    });\n  }, []);\n  var removeFavoriteTrack = useCallback(function (trackObj) {\n    dispatch({\n      type: trackActionTypes.REMOVE_FAVORITE_TRACK,\n      payload: trackObj\n    });\n  }, []);\n  return {\n    tracks: state.tracks,\n    favoriteTrackIds: state.favoriteTrackIds,\n    trendingTracks: findObjectsByKeys(state.trendingTracks, state.tracks),\n    addFavoriteTrackIds: addFavoriteTrackIds,\n    checkIsFavoriteTrack: checkIsFavoriteTrack,\n    addFavoriteTrack: addFavoriteTrack,\n    addTrendingTracks: addTrendingTracks,\n    removeFavoriteTrack: removeFavoriteTrack\n  };\n};\n\nvar _constate = constate(useTrack, function (value) {\n  return value.tracks;\n}, function (value) {\n  return value.trendingTracks;\n}, function (value) {\n  return value.addFavoriteTrackIds;\n}, function (value) {\n  return value.checkIsFavoriteTrack;\n}, function (value) {\n  return value.addFavoriteTrack;\n}, function (value) {\n  return value.addTrendingTracks;\n}, function (value) {\n  return value.removeFavoriteTrack;\n}),\n    _constate2 = _slicedToArray(_constate, 8),\n    TrackProvider = _constate2[0],\n    useTracks = _constate2[1],\n    useTrendingTracks = _constate2[2],\n    useAddFavoriteTrackIds = _constate2[3],\n    useIsFavoriteTrack = _constate2[4],\n    useAddFavoriteTrack = _constate2[5],\n    useAddTrendingTracks = _constate2[6],\n    useRemoveFavoriteTrack = _constate2[7];\n\nexport { TrackProvider, useTracks, useTrendingTracks, useAddFavoriteTrackIds, useIsFavoriteTrack, useAddFavoriteTrack, useAddTrendingTracks, useRemoveFavoriteTrack };","map":null,"metadata":{},"sourceType":"module"}