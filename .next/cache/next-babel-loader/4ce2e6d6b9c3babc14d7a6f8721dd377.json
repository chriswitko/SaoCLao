{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport constate from 'constate';\nimport { firebase } from '../constants/firebase.constant';\nimport { myApiAxiosInstance } from '../constants/myApi.constant';\nimport { localStorageService } from '../helpers/storage.helper';\n\nconst useAuther = () => {\n  const [user, setUser] = React.useState(null);\n  const [refreshToken, setRefreshToken] = React.useState(null);\n  React.useEffect(() => {\n    // Listen for auth state changes\n    const unsubscribe = firebase.auth().onAuthStateChanged(async user => {\n      if (user) {\n        const tokenResult = await firebase.auth().currentUser.getIdTokenResult(true);\n        localStorageService.setToken(tokenResult.token);\n        setRefreshToken(true);\n        setUser(_objectSpread({}, user, {\n          admin: tokenResult.claims.admin,\n          username: user.displayName\n        }));\n      } else {\n        localStorageService.removeToken();\n        setUser(null);\n      }\n    }); // Unsubscribe to the listener when unmounting\n\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  const loginWithEmail = async (email, password) => {\n    await firebase.auth().signInWithEmailAndPassword(email, password);\n    window.location.reload();\n    localStorageService.setToken('authenticated'); // for showing user section quickly when token is empty because google auth is slow\n  };\n\n  const signOut = () => {\n    firebase.auth().signOut();\n    window.location.reload();\n  };\n\n  return {\n    user,\n    refreshToken,\n    loginWithEmail,\n    signOut\n  };\n};\n\nexport const [AuthProvider, useAuth] = constate(useAuther);","map":null,"metadata":{},"sourceType":"module"}