{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport React from 'react';\nimport { useMusicPlayerContext } from '../contexts/MusicPlayerContext';\nimport { isBrowser } from '../helpers/utils.helper';\nexport var musicPlayer = {\n  instance: null,\n  setInstance: function setInstance(instance) {\n    return musicPlayer.instance = instance;\n  },\n  getInstance: function getInstance() {\n    return musicPlayer.instance;\n  }\n};\nvar audioList1 = [{\n  name: 'Despacito',\n  singer: 'Luis Fonsi',\n  cover: 'http://res.cloudinary.com/alick/image/upload/v1502689731/Despacito_uvolhp.jpg',\n  musicSrc: function musicSrc() {\n    return _Promise.resolve('http://res.cloudinary.com/alick/video/upload/v1502689683/Luis_Fonsi_-_Despacito_ft._Daddy_Yankee_uyvqw9.mp3');\n  }\n}];\nexport var options = {\n  // audio lists model\n  audioLists: audioList1,\n  // default play index of the audio player  [type `number` default `0`]\n  defaultPlayIndex: 0,\n  // if you want dynamic change current play audio you can change it [type `number` default `0`]\n  // playIndex: 0,\n  // color of the music player theme    [ type `string: 'light' or 'dark'  ` default 'dark' ]\n  theme: 'dark',\n  // Specifies movement boundaries. Accepted values:\n  // - `parent` restricts movement within the node's offsetParent\n  //    (nearest node with position relative or absolute), or\n  // - a selector, restricts movement within the targeted node\n  // - An object with `left, top, right, and bottom` properties.\n  //   These indicate how far in each direction the draggable\n  //   can be moved.\n  bounds: 'body',\n  // Replace a new playlist with the first loaded playlist\n  // instead of adding it at the end of it.\n  // [type `boolean`, default `false`]\n  clearPriorAudioLists: true,\n  // Play your new play list right after your new play list is loaded turn false.\n  // [type `boolean`, default `false`]\n  autoPlayInitLoadPlayList: true,\n  // Whether to load audio immediately after the page loads.  [type `Boolean | String`, default `false`]\n  // \"auto|metadata|none\" \"true| false\"\n  preload: false,\n  // Whether the player's background displays frosted glass effect  [type `Boolean`, default `false`]\n  glassBg: false,\n  // The next time you access the player, do you keep the last state  [type `Boolean` default `false`]\n  remember: false,\n  // The Audio Can be deleted  [type `Boolean`, default `true`]\n  remove: true,\n  // audio controller initial position    [ type `Object` default '{top:0,left:0}' ]\n  defaultPosition: {\n    top: 300,\n    left: 120\n  },\n  //   // play mode text config of the audio player\n  //   playModeText: {\n  //     order: \"\",\n  //     orderLoop: \"\",\n  //     singleLoop: \"\",\n  //     shufflePlay: \"\"\n  //   },\n  defaultPlayMode: 'order',\n  // audio mode        mini | full          [type `String`  default `mini`]\n  mode: 'mini',\n\n  /**\n   * [ type `Boolean` default 'false' ]\n   * The default audioPlay handle function will be played again after each pause, If you only want to trigger it once, you can set 'true'\n   */\n  once: false,\n  // Whether the audio is played after loading is completed. [type `Boolean` default 'true']\n  autoPlay: true,\n  // Whether you can switch between two modes, full => mini  or mini => full   [type 'Boolean' default 'true']\n  toggleMode: true,\n  // audio cover is show of the \"mini\" mode [type `Boolean` default 'true']\n  showMiniModeCover: true,\n  // audio playing progress is show of the \"mini\"  mode\n  showMiniProcessBar: false,\n  // audio controller is can be drag of the \"mini\" mode     [type `Boolean` default `true`]\n  drag: true,\n  // drag the audio progress bar [type `Boolean` default `true`]\n  seeked: true,\n  // Displays the audio load progress bar.  [type `Boolean` default `true`]\n  showProgressLoadBar: true,\n  // play button display of the audio player panel   [type `Boolean` default `true`]\n  showPlay: true,\n  // reload button display of the audio player panel   [type `Boolean` default `true`]\n  showReload: true,\n  // download button display of the audio player panel   [type `Boolean` default `true`]\n  showDownload: false,\n  // loop button display of the audio player panel   [type `Boolean` default `true`]\n  showPlayMode: true,\n  // theme toggle switch  display of the audio player panel   [type `Boolean` default `true`]\n  showThemeSwitch: true,\n  // lyric display of the audio player panel   [type `Boolean` default `false`]\n  showLyric: false,\n  // Extensible custom content       [type 'Array' default '[]' ]\n  extendsContent: [],\n  // default volume of the audio player [type `Number` default `100` range `0-100`]\n  defaultVolume: 100,\n  // playModeText show time [type `Number(ms)` default `700`]\n  playModeShowTime: 600,\n  // Whether to try playing the next audio when the current audio playback fails [type `Boolean` default `true`]\n  loadAudioErrorPlayNext: true,\n  // Auto hide the cover photo if no cover photo is available [type `Boolean` default `false`]\n  autoHiddenCover: true,\n  // // custom music player root node\n  getContainer: function getContainer() {\n    return document.body;\n  },\n  getAudioInstance: function getAudioInstance(instance) {\n    musicPlayer.setInstance(instance);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}